"use strict";(self.webpackChunkmigrated_blog=self.webpackChunkmigrated_blog||[]).push([[8358],{2654:(t,e,n)=>{n.r(e),n.d(e,{comp:()=>o,data:()=>a});var r=n(641);const s={},o=(0,n(6262).A)(s,[["render",function(t,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<ul><li><h3 id="js事件委托" tabindex="-1"><a class="header-anchor" href="#js事件委托"><span>js事件委托</span></a></h3></li></ul><p>给同层次的所有元素的共同的祖先节点添加一个事件处理程序，而不用给每一个</p><p>元素都添加事件处理</p><ul><li><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h3></li></ul><p><strong>闭包</strong>指的是引用了另一个函数作用域中变量的<strong>函数</strong>，通常是在嵌套函数中实现的。</p><p><em><strong>由于闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过渡占用</strong></em></p><ul><li><h3 id="移动端适配的方案" tabindex="-1"><a class="header-anchor" href="#移动端适配的方案"><span>移动端适配的方案</span></a></h3></li></ul><p>移动端web页面的开发，由于手机<strong>屏幕尺寸</strong>、<strong>分辨率</strong>不同，或者需要考虑<strong>横竖屏</strong>问题，为了使得web页面在不同移动设备上具有相适应的展示效果，需要在开发过程中使用合理的适配方案来解决这个问题。</p><p>方法一：<strong>rem</strong></p><ol><li>给根节点设置一个字体大小</li><li>然后，其他尺寸单位全部用 <strong>rem</strong></li><li>监听屏幕的大小</li><li>根据屏幕的大小<strong>按比例改变</strong>根节点字体的大小</li></ol><p>方法二:<strong>媒体查询</strong> <strong>(@media)</strong></p><p>@media起到的作用是，你可以<strong>给不同尺寸的设备，设置单独、互不影响的 css 属性</strong>。</p><p>比如：屏幕宽度小于 500px 时（手机屏幕），怎样怎样<br> 宽度在 500px ～ 1000px 时（平板屏幕），怎样怎样<br> 宽度在 1000px ～ 1500px 时（电脑小屏幕），怎样怎样<br> 宽度在 1500px ～ 2000px 时（普通电脑屏幕），怎样怎样</p><ul><li><h3 id="立即执行函数" tabindex="-1"><a class="header-anchor" href="#立即执行函数"><span><strong>立即执行函数</strong></span></a></h3><p>(有多种写法：(function(){} )()、( function(){} ())、!function(){}()、)</p></li></ul><p>作用：1. 页面加载完成后<strong>只执行一次</strong>的设置函数 2. 将设置函数中的变量包裹在局部作用域中，不会泄露成全局变量。 3. 创建一个<strong>独立的作用域</strong>，这个作用域里的变量，外面访问不到(<strong>避免变量污染</strong>)</p><ul><li><h3 id="js的this指向性问题" tabindex="-1"><a class="header-anchor" href="#js的this指向性问题"><span>js的<strong>this指向性</strong>问题</span></a></h3></li></ul><ol><li><p>对于<strong>普通函数</strong>来说，this指向的是其调用者，对于箭头函数来说this指向的是调用者的父级</p></li><li><p>对于<strong>匿名函数</strong>来说，this指向的是window,原因是，匿名函数的执行环境是全局的，而且this只在函数内部起作用。在匿名函数中找不到相应内容，所以就从全局中找，找到后打印出来。</p></li><li><p>对于<strong>箭头函数</strong>来说，this指向的是其父级的调用者。</p></li></ol><ul><li><h3 id="浏览器渲染页面的过程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染页面的过程"><span><strong>浏览器渲染页面</strong>的过程</span></a></h3></li></ul><ol><li><p>根据html文件<strong>构建DOM树</strong>和<strong>CSSOM树</strong>。如果遇到js，阻塞DOM树及CSSOM树的构建，优先加载js文件，加载完毕再继续构建DOM树及CSSOM树；<strong>DOM树构建过程</strong>：<strong>读取html文档，将字节转换成字符，确定tokens（标签），再将tokens转换成节点，以节点构建 DOM 树</strong>。</p></li><li><p>构建<strong>渲染树(Render Tree)</strong>;//<strong>细说</strong>：渲染树（Render Tree）<strong>由DOM树</strong>、<strong>CSSOM树</strong>合并而成，并不是必须等DOM树及CSSOM树加载完成后才开始合并构建渲染树。<strong>三者的构建并无先后</strong>条件，亦非完全独立，而是会有交叉，并行构建。因此会形成一边加载，一边解析，一边渲染的工作现象。</p></li><li><p>页面的重绘(repaint)与重排(reflow)页面渲染完成后，若JS操作了DOM节点，根据JS对DOM操作动作的大小，浏览器对页面进行重绘或是重排。</p></li></ol><ul><li><h3 id="vue中for循环的key的作用" tabindex="-1"><a class="header-anchor" href="#vue中for循环的key的作用"><span>vue中<strong>for循环的key</strong>的作用</span></a></h3></li></ul><p>key绑定的值不同，所对应的组件中对遍历的列表进行修改时性能会不同，不建议把key绑定至数组的index下，建议绑定在数组内容中某个可以标识内容的值，提高数组渲染的性能。</p><ul><li><h3 id="vue组件生命周期" tabindex="-1"><a class="header-anchor" href="#vue组件生命周期"><span><strong>vue组件生命周期</strong></span></a></h3></li></ul><p>beforeCreate:创建空的vue实例，data和methods中的数据未被初始化；</p><p>Created: data和methods中的数据初始化完成，可以开始使用data和methods进行一些初始操作</p><p>beforeMount: vue组件的模板编译完成，并存放于内存中，但尚未挂载和渲染至页面</p><p>mounted: 将内存中编译好的模板进行挂载，并渲染至页面中</p>',26)]))}]]),a=JSON.parse('{"path":"/posts/blogs/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%BD%92%E6%A1%A3","title":"面试题目归档","lang":"zh-CN","frontmatter":{"title":"面试题目归档","date":"2021-07-09T21:23:00.000Z","permalink":"/posts/blogs/面试题目归档","isTimeLine":true,"category":["我的前端路线"],"tag":["javascript","vue"],"icon":"pen-to-square","star":true,"sticky":true,"description":"js事件委托 给同层次的所有元素的共同的祖先节点添加一个事件处理程序，而不用给每一个 元素都添加事件处理 闭包 闭包指的是引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。 由于闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过渡占用 移动端适配的方案 移动端web页面的开发，由于手机屏幕尺寸、分辨率不同，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面试题目归档\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-09T21:23:00.000Z\\",\\"dateModified\\":\\"2025-07-03T11:15:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zzf\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/migrated_blog/posts/blogs/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%BD%92%E6%A1%A3"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"面试题目归档"}],["meta",{"property":"og:description","content":"js事件委托 给同层次的所有元素的共同的祖先节点添加一个事件处理程序，而不用给每一个 元素都添加事件处理 闭包 闭包指的是引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。 由于闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过渡占用 移动端适配的方案 移动端web页面的开发，由于手机屏幕尺寸、分辨率不同，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-03T11:15:49.000Z"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:published_time","content":"2021-07-09T21:23:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-03T11:15:49.000Z"}]]},"git":{"createdTime":1751541349000,"updatedTime":1751541349000,"contributors":[{"name":"zhujinfa","username":"zhujinfa","email":"2095229306@qq.com","commits":1,"url":"https://github.com/zhujinfa"}]},"readingTime":{"minutes":3.67,"words":1100},"filePathRelative":"posts/blogs/面试题目归档.md","excerpt":"<ul>\\n<li>\\n<h3>js事件委托</h3>\\n</li>\\n</ul>\\n<p>给同层次的所有元素的共同的祖先节点添加一个事件处理程序，而不用给每一个</p>\\n<p>元素都添加事件处理</p>\\n<ul>\\n<li>\\n<h3>闭包</h3>\\n</li>\\n</ul>\\n<p><strong>闭包</strong>指的是引用了另一个函数作用域中变量的<strong>函数</strong>，通常是在嵌套函数中实现的。</p>\\n<p><em><strong>由于闭包会保留它们包含函数的作用域，所以比其他函数更占用内存。过度使用闭包可能导致内存过渡占用</strong></em></p>\\n<ul>\\n<li>\\n<h3>移动端适配的方案</h3>\\n</li>\\n</ul>","autoDesc":true}')},6262:(t,e)=>{e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,r]of e)n[t]=r;return n}}}]);