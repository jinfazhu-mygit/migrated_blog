"use strict";(self.webpackChunkmigrated_blog=self.webpackChunkmigrated_blog||[]).push([[172],{2313:(i,t,e)=>{e.r(t),e.d(t,{comp:()=>l,data:()=>n});var s=e(641);const a={},l=(0,e(6262).A)(a,[["render",function(i,t){return(0,s.uX)(),(0,s.CE)("div",null,t[0]||(t[0]=[(0,s.Fv)('<h2 id="详细介绍git" tabindex="-1"><a class="header-anchor" href="#详细介绍git"><span><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ" target="_blank" rel="noopener noreferrer">详细介绍git</a></span></a></h2><h2 id="git常用命令" tabindex="-1"><a class="header-anchor" href="#git常用命令"><span>git常用命令</span></a></h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h3><p><code>git </code>的操作可以通过命令的形式如执行，日常使用就如下图6个命令即可</p><figure><img src="https://s1.ax1x.com/2022/10/26/xWyjJO.png" alt="xWyjJO.png" tabindex="0" loading="lazy"><figcaption>xWyjJO.png</figcaption></figure><h3 id="本地代码版本回退-重点" tabindex="-1"><a class="header-anchor" href="#本地代码版本回退-重点"><span>本地代码版本回退(重点)</span></a></h3><ol><li>git reflog查看历史操作编号</li><li>git reset --soft [操作编号] 返回对应的暂存状态，多用于撤销上一步commit，回到原来<strong>add之后</strong>的状态</li><li>git reset --mixed [操作编号] 返回对应的暂存状态，多用于撤销上一步commit，回到原来<strong>add之前</strong>的状态</li><li>git reset --hard [操作编号] 返回对应版本，慎用！将会改变和去掉在本地的代码</li></ol><figure><img src="https://z1.ax1x.com/2023/11/17/pit6NP1.png" alt="pit6NP1.png" tabindex="0" loading="lazy"><figcaption>pit6NP1.png</figcaption></figure><h3 id="常用命令有哪些" tabindex="-1"><a class="header-anchor" href="#常用命令有哪些"><span>常用命令有哪些</span></a></h3><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h4><p><code>Git </code>自带一个 <code>git config</code> 的工具来帮助设置控制 <code>Git </code>外观和行为的配置变量，在我们安装完<code>git</code>之后，第一件事就是设置你的用户名和邮件地址</p><p>后续每一个提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改</p><p>设置提交代码时的用户信息命令如下：</p><ul><li>git config [--global] <a href="http://user.name" target="_blank" rel="noopener noreferrer">user.name</a> &quot;[name]&quot;</li><li>git config [--global] user.email &quot;[email address]&quot;</li></ul><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h4><p>一个<code>git</code>项目的初始有两个途径，分别是：</p><ul><li>git init [project-name]：创建或在当前目录初始化一个git代码库</li><li>git clone url：下载一个项目和它的整个代码历史</li></ul><h4 id="日常基本操作" tabindex="-1"><a class="header-anchor" href="#日常基本操作"><span>日常基本操作</span></a></h4><p>在日常工作中，代码常用的基本操作如下：</p><ul><li><p>git init 初始化仓库，默认为 master 分支</p></li><li><p>git remote add origin ___</p></li><li><p>git clone ___</p></li><li><p>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt; 拉取远程仓库的分支与本地当前分支合并</p></li><li><p>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 拉取远程仓库的分支与本地某个分支合并</p></li><li><p>git status 查看当前分支状态</p></li><li><p>git diff 查看当前代码 add后，会 add 哪些内容</p></li><li><p>git add . 提交全部文件修改到缓存区</p></li><li><p>git add &lt;具体某个文件路径+全名&gt; 提交某些文件到缓存区</p></li><li><p>git restore --staged <code>&lt;file&gt;</code> 将某文件移除暂存区</p></li><li><p>git diff --staged查看现在 commit 提交后，会提交哪些内容</p></li><li><p>git commit -a -m&quot;&lt;注释&gt;&quot; === git add. + git commit -m&quot;&lt;注释&gt;&quot;</p></li><li><p>git commit -m &quot;&lt;注释&gt;&quot; 提交代码到本地仓库，并写提交注释</p></li><li><p>git commit -v 提交时显示所有diff信息</p></li><li><p>git commit --amend [file1][file2] 重做上一次commit，并包括指定文件的新变化</p></li><li><p>git log查看提交日志和对应的<strong>校验和</strong></p></li><li><p><strong>git log --pretty=oneline</strong> 优化显示在一行</p></li><li><p>git log --pretty=oneline --graph</p></li></ul><figure><img src="https://s1.ax1x.com/2022/12/27/zzJdE9.png" alt="zzJdE9.png" tabindex="0" loading="lazy"><figcaption>zzJdE9.png</figcaption></figure><ul><li>​</li></ul><p>关于提交信息的格式，可以遵循以下的规则：</p><ul><li>feat: 新特性，添加功能</li><li>fix: 修改 bug</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理</li></ul><h4 id="分支操作" tabindex="-1"><a class="header-anchor" href="#分支操作"><span>分支操作</span></a></h4><ul><li>分支查看 <ul><li>git branch 查看本地所有分支</li><li>git branch -r 查看远程所有分支</li><li>git branch -a 查看本地和远程所有分支</li></ul></li><li>新建分支 <ul><li>git branch &lt;新分支名&gt; 基于当前分支，新建一个分支</li><li>git checkout -b &lt;新分支名&gt; 把基于当前分支新建分支，并切换为这个分支</li><li>git checkout --orphan &lt;新分支名&gt; 新建一个空分支（会保留之前分支的所有文件）</li></ul></li><li>删除分支 <ul><li>git branch -D &lt;分支名&gt; 删除本地某个分支</li><li>git push &lt;远程库名&gt; :&lt;分支名&gt; 删除远程某个分支</li><li>git branch &lt;新分支名称&gt; &lt;提交ID&gt; 从提交历史恢复某个删掉的某个分支</li></ul></li><li>切换分支 <ul><li>git branch -m &lt;原分支名&gt; &lt;新分支名&gt; 分支更名</li><li>git checkout &lt;分支名&gt; 切换到本地某个分支</li><li>git checkout &lt;远程库名&gt;/&lt;分支名&gt; 切换到线上某个分支</li></ul></li><li>合并分支 <ul><li>git merge origin/&lt;分支名1&gt; 将<strong>远程仓库中的分支1代码合并到远程当前所在分支</strong></li><li>git merge --abort 合并分支出现冲突时，取消合并，一切回到合并前的状态</li></ul></li></ul><h4 id="远程同步" tabindex="-1"><a class="header-anchor" href="#远程同步"><span>远程同步</span></a></h4><p>远程操作常见的命令：</p><ul><li>git fetch [remote] 下载远程仓库的所有变动</li><li>git remote -v 显示所有远程仓库</li><li>git pull remote branch 拉取远程仓库的分支与本地当前分支合并</li><li>git fetch 获取线上最新版信息记录，不合并</li><li>git push remote branch 上传本地指定分支到远程仓库</li><li>git push -u origin master <ul><li>加了参数-u后，以后即可直接用git push代替git push origin master</li></ul></li><li>git push --set-upstream origin &lt;新分支1&gt; 创建远程新分支1并推送当前分支代码到新分支1，同时建立与远端分支的关联关系</li><li>git push [remote] --force 强行推送当前分支到远程仓库，即使有冲突</li><li>git push [remote] --all 推送所有分支到远程仓库</li></ul><h4 id="撤销" tabindex="-1"><a class="header-anchor" href="#撤销"><span>撤销</span></a></h4><ul><li>git checkout [file] 恢复暂存区的指定文件到工作区</li><li>git checkout [commit][file] 恢复某个commit的指定文件到暂存区和工作区</li><li>git checkout . 恢复暂存区的所有文件到工作区</li></ul><h5 id="git丢弃操作" tabindex="-1"><a class="header-anchor" href="#git丢弃操作"><span><a href="https://blog.csdn.net/weixin_44720938/article/details/127726964" target="_blank" rel="noopener noreferrer">git丢弃操作</a></span></a></h5><h5 id="回退" tabindex="-1"><a class="header-anchor" href="#回退"><span>回退</span></a></h5><ul><li><p>git通过HEAD指针记录当前版本</p></li><li><p><strong>我们可通过改变HEAD的指向，修改回退版本</strong>：</p><ul><li><strong>git reset --hard HEAD</strong>^回退到上一个版本</li><li>git reset --hard HEAD^^回退到上上个版本</li><li>git reset --hard HEAD~10回退到前10个版本</li><li>**git reset --hard &lt;校验和&gt;**回退到某个校验和对应的版本</li></ul></li><li><p>回退后再通过<strong>git reflog --pretty=oneline</strong>可查看操作记录拿到包括操作记录在内的校验和</p></li></ul><ul><li>git reset [commit] 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</li><li>git reset --hard 重置暂存区与工作区，与上一次commit保持一致</li><li>git reset [file] 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</li><li>git revert [commit] 后者的所有变化都将被前者抵消，并且应用到当前分支</li></ul><blockquote><p><code>reset</code>：真实硬性回滚，目标版本后面的提交记录全部丢失了</p><p><code>revert</code>：同样回滚，这个回滚操作相当于一个提价，目标版本后面的提交记录也全部都有</p></blockquote><h4 id="存储操作" tabindex="-1"><a class="header-anchor" href="#存储操作"><span>存储操作</span></a></h4><p>你<strong>正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态</strong>，而你想<strong>转到其他分支上进行一些工作</strong>，但又<strong>不想提交这些杂乱的代码，这时候可以将代码进行存储</strong></p><ul><li>git stash 暂时将未提交的变化移除</li><li>git stash pop 取出储藏中最后存入的工作状态进行恢复，会删除储藏</li><li>git stash list 查看所有储藏中的工作</li><li>git stash apply &lt;储藏的名称&gt; 取出储藏中对应的工作状态进行恢复，不会删除储藏</li><li>git stash clear 清空所有储藏中的工作</li><li>git stash drop &lt;储藏的名称&gt; 删除对应的某个储藏</li></ul><h2 id="git-fetch和git-pull的区别" tabindex="-1"><a class="header-anchor" href="#git-fetch和git-pull的区别"><span>git fetch和git pull的区别</span></a></h2><figure><img src="https://s1.ax1x.com/2022/10/26/xWhADe.png" alt="xWhADe.png" tabindex="0" loading="lazy"><figcaption>xWhADe.png</figcaption></figure><ul><li><p>可以看到，<strong><code>git fetch</code>是将远程主机的最新内容拉到本地，用户在检查了以后决定是否合并到工作本机分支中</strong></p></li><li><p>而<code>git pull</code> 则是<strong>将远程主机的最新内容拉下来后直接合并</strong>，即：<strong><code>git pull = git fetch + git merge</code>，这样可能会产生冲突，需要手动解决</strong></p></li><li><p>在我们本地的<code>git</code>文件中对应也存储了<code>git</code>**本地仓库分支的<code>commit ID </code>**和 <strong>跟踪的远程分支的<code>commit ID</code></strong>，对应文件如下：</p><ul><li>.git/refs/head/[本地分支]</li><li>.git/refs/remotes/[正在跟踪的分支]</li></ul><p>使用 <code>git fetch</code>更新代码，<strong>本地的库中<code>master</code>的<code>commitID</code>不变</strong></p><p>但是与**<code>git</code>上面关联的那个<code>orign/master</code>的<code>commit ID</code>发生改变**</p><p><strong>这时候我们本地相当于存储了两个代码的版本号，我们还要通过<code>merge</code>去合并这两个不同的代码版本</strong></p></li></ul><figure><img src="https://s1.ax1x.com/2022/10/26/xWhK8P.png" alt="xWhK8P.png" tabindex="0" loading="lazy"><figcaption>xWhK8P.png</figcaption></figure><p>也就是<code>fetch</code>的时候本地的<code>master</code>没有变化，但是与远程仓关联的那个版本号被更新了，接下来就是<strong>在本地<code>merge</code>合并这两个版本号的代码</strong></p><p>相比之下，使用<code>git pull</code>就更加简单粗暴，会将本地的代码更新至远程仓库里面最新的代码版本，如下图：</p><figure><img src="https://s1.ax1x.com/2022/10/26/xWhQv8.png" alt="xWhQv8.png" tabindex="0" loading="lazy"><figcaption>xWhQv8.png</figcaption></figure><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><p>一般远端仓库里有新的内容更新，当我们需要把新内容下载的时候，就使用到<code>git pull</code>或者<code>git fetch</code>命令</p><h4 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch"><span>fetch</span></a></h4><p>例如从远程的<code>origin</code>仓库的<code>master</code>分支下载代码到本地并新建一个<code>temp</code>分支</p><div class="language-git line-numbers-mode" data-highlighter="shiki" data-ext="git" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-git"><span class="line"><span>git fetch origin master:temp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>如果上述没有冒号，则表示将远程<code>origin</code>仓库的<code>master</code>分支拉取下来到本地当前分支</strong></p><p>这里<code>git fetch</code>不会进行合并，执行后需要手动执行<code>git merge</code>合并，如下：</p><div class="language-git line-numbers-mode" data-highlighter="shiki" data-ext="git" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-git"><span class="line"><span>git merge temp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="pull" tabindex="-1"><a class="header-anchor" href="#pull"><span>pull</span></a></h4><p>例如将远程主机<code>origin</code>的<code>master</code>分支拉取过来，与本地的<code>branchtest</code>分支合并，命令如下：</p><div class="language-git line-numbers-mode" data-highlighter="shiki" data-ext="git" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-git"><span class="line"><span>git pull origin master:branchtest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样如果上述没有冒号，则表示将远程<code>origin</code>仓库的<code>master</code>分支拉取下来与本地当前分支合并</p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><p>相同点：</p><ul><li>在作用上他们的功能是大致相同的，都是起到了更新代码的作用</li></ul><p>不同点：</p><ul><li>git pull是相当于从远程仓库获取最新版本，然后再与本地分支merge，即<strong>git pull = git fetch + git merge</strong></li><li>相比起来，git fetch 更安全也更符合实际要求，在 merge 前，我们可以查看更新情况，根据实际情况再决定是否合并</li></ul><h2 id="git拉取项目代码" tabindex="-1"><a class="header-anchor" href="#git拉取项目代码"><span>git拉取项目代码</span></a></h2><h3 id="拉取" tabindex="-1"><a class="header-anchor" href="#拉取"><span>拉取</span></a></h3><ol><li><p>新建一个文件夹，进入，右键git bash here</p></li><li><p>执行git init进行初始化</p><figure><img src="https://z3.ax1x.com/2021/09/23/4wNxht.png" alt="4wNxht.png" tabindex="0" loading="lazy"><figcaption>4wNxht.png</figcaption></figure></li><li><p>创建远程连接：git remote add origin ___</p><figure><img src="https://z3.ax1x.com/2021/09/23/4warsU.png" alt="4warsU.png" tabindex="0" loading="lazy"><figcaption>4warsU.png</figcaption></figure><figure><img src="https://z3.ax1x.com/2021/09/23/4wUUgK.png" alt="4wUUgK.png" tabindex="0" loading="lazy"><figcaption>4wUUgK.png</figcaption></figure></li><li><p><strong>拉取远程分支到本地</strong>：<strong>git fetch origin dev</strong> (dev为远程仓库的分支名)；这里个人建议直接<strong>git fetch origin</strong> 拉取所有存在的远程分支，之后用<strong>Sourcetree</strong>的时候会更快乐</p><figure><img src="https://z3.ax1x.com/2021/09/23/4wdLBF.png" alt="4wdLBF.png" tabindex="0" loading="lazy"><figcaption>4wdLBF.png</figcaption></figure></li><li><p><strong>本地创建分支并切换到该分支</strong>：<strong>git checkout -b zjf</strong>(本地分支名称)</p></li><li><p><strong>拉取远端某个分支的代码到刚才创建的本地分支</strong>(zjf)：<strong>git pull origin dev</strong>(远程分支名)</p></li></ol><figure><img src="https://z3.ax1x.com/2021/09/23/4w0lxx.png" alt="4w0lxx.png" tabindex="0" loading="lazy"><figcaption>4w0lxx.png</figcaption></figure><ol start="7"><li><p>现在已经可以在新创建的文件夹下查看到拉取的代码了</p><figure><img src="https://z3.ax1x.com/2021/09/23/4w0oLT.png" alt="4w0oLT.png" tabindex="0" loading="lazy"><figcaption>4w0oLT.png</figcaption></figure></li></ol><h3 id="推送" tabindex="-1"><a class="header-anchor" href="#推送"><span>推送</span></a></h3><h4 id="推送本地仓库远程仓库版本问题报错解决" tabindex="-1"><a class="header-anchor" href="#推送本地仓库远程仓库版本问题报错解决"><span>推送本地仓库远程仓库版本问题报错解决</span></a></h4><p>Error: **[rejected] main -＞ main (non-fast-forward)**error: failed to push some refs to<br> Solution: <strong>git pull origin main --allow-unrelated-histories</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 查看变化文件</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> status</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添加到版本管理</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提交到本地仓库remotes文件夹(版本库)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> commit</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;submit info&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 拉取远程代码(本地代码拉取远程，同步) 针对分支拉取</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> pull</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> pull</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> --</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">rebase</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dev</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // git push origin失败时使用(如：文件不同步)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 推送 针对分支推送</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> push</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dev</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">git</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> push</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">u</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> origin</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> dev</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码取消关联</li><li>git remote remove origin</li></ul><h2 id="git其他常用命令补充" tabindex="-1"><a class="header-anchor" href="#git其他常用命令补充"><span>git其他常用命令补充：</span></a></h2><ul><li><p><strong>git branch</strong>：<strong>查看</strong>本地已检出的分支，和查看当前正使用的分支是哪个</p></li><li><p><strong>git branch __</strong>：本地<strong>新建该分支</strong>(不切换至该分支)</p></li><li><p><strong>git branch -D __</strong>：<strong>删除</strong>某个<strong>本地分支</strong></p></li><li><p><strong>git checkout ___</strong>：检出并<strong>切换</strong>至<strong>已拉取的远程分支</strong>，执行后可git branch查看到</p><figure><img src="https://z3.ax1x.com/2021/09/23/4wse61.png" alt="4wse61.png" tabindex="0" loading="lazy"><figcaption>4wse61.png</figcaption></figure></li><li><p><strong>git checkout -b __</strong>：本地<strong>新建</strong>一个分支，<strong>并切换</strong>至该分支</p><figure><img src="https://z3.ax1x.com/2021/09/23/4wyS9H.png" alt="4wyS9H.png" tabindex="0" loading="lazy"><figcaption>4wyS9H.png</figcaption></figure></li><li><p><strong>git push origin jf:jf</strong>：将jf<strong>分支推送到远程</strong></p><p>冒号前面的jf：推送本地的dev分支到远程origin</p><p>冒号后面的jf：远程origin没有会自动创建</p></li><li><p><strong>git push origin --delete jf</strong>：<strong>删除远程仓库</strong>的jf<strong>分支</strong></p></li></ul><h4 id="更多其他命令不予补充-安利sourcetree-可视化git代码管理" tabindex="-1"><a class="header-anchor" href="#更多其他命令不予补充-安利sourcetree-可视化git代码管理"><span>更多其他命令不予补充，安利<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener noreferrer">Sourcetree</a>，可视化git代码管理</span></a></h4><h2 id="github推送数据问题connection-reset-by-20-205-243-166-port-22" tabindex="-1"><a class="header-anchor" href="#github推送数据问题connection-reset-by-20-205-243-166-port-22"><span>github推送数据问题Connection reset by 20.205.243.166 port 22</span></a></h2><ul><li>ping github.com出现</li></ul><figure><img src="https://s1.ax1x.com/2022/10/26/xWdBuV.png" alt="xWdBuV.png" tabindex="0" loading="lazy"><figcaption>xWdBuV.png</figcaption></figure><ul><li>推送代码出现：Connection reset by 20.205.243.166 port 22</li></ul><h3 id="解决方案一" tabindex="-1"><a class="header-anchor" href="#解决方案一"><span>解决方案一：</span></a></h3><p>切换电脑网络，连接手机wifi进行推送</p><h3 id="解决方案二" tabindex="-1"><a class="header-anchor" href="#解决方案二"><span>解决方案二：</span></a></h3><ul><li>C:\\Windows\\System32\\drivers\\etc</li><li>HOSTS文件内加上</li></ul><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">192.30.255.112</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  github.com git </span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">185.31.16.184</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> github.global.ssl.fastly.net</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ping <a href="http://github.com" target="_blank" rel="noopener noreferrer">github.com</a></li></ul><figure><img src="https://s1.ax1x.com/2022/10/26/xWd2C9.png" alt="xWd2C9.png" tabindex="0" loading="lazy"><figcaption>xWd2C9.png</figcaption></figure><h2 id="生成ssh密钥" tabindex="-1"><a class="header-anchor" href="#生成ssh密钥"><span><a href="https://blog.csdn.net/qq_35495339/article/details/92847819?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ssh-keygen%20-t%20rsa%E7%94%9F%E6%88%90%20github&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-92847819.142%5Ev60%5Epc_search_tree,201%5Ev3%5Eadd_ask,213%5Ev1%5Econtrol&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreferrer">生成ssh密钥</a></span></a></h2>',88)]))}]]),n=JSON.parse('{"path":"/posts/blogs/Git","title":"Git","lang":"zh-CN","frontmatter":{"title":"Git","date":"2021-09-23T18:00:00.000Z","permalink":"/posts/blogs/Git","isTimeLine":true,"category":["我的前端路线"],"tag":["git"],"icon":"pen-to-square","star":true,"sticky":true,"description":"详细介绍git git常用命令 前言 git 的操作可以通过命令的形式如执行，日常使用就如下图6个命令即可 xWyjJO.pngxWyjJO.png 本地代码版本回退(重点) git reflog查看历史操作编号 git reset --soft [操作编号] 返回对应的暂存状态，多用于撤销上一步commit，回到原来add之后的状态 git rese...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git\\",\\"image\\":[\\"https://s1.ax1x.com/2022/10/26/xWyjJO.png\\",\\"https://z1.ax1x.com/2023/11/17/pit6NP1.png\\",\\"https://s1.ax1x.com/2022/12/27/zzJdE9.png\\",\\"https://s1.ax1x.com/2022/10/26/xWhADe.png\\",\\"https://s1.ax1x.com/2022/10/26/xWhK8P.png\\",\\"https://s1.ax1x.com/2022/10/26/xWhQv8.png\\",\\"https://z3.ax1x.com/2021/09/23/4wNxht.png\\",\\"https://z3.ax1x.com/2021/09/23/4warsU.png\\",\\"https://z3.ax1x.com/2021/09/23/4wUUgK.png\\",\\"https://z3.ax1x.com/2021/09/23/4wdLBF.png\\",\\"https://z3.ax1x.com/2021/09/23/4w0lxx.png\\",\\"https://z3.ax1x.com/2021/09/23/4w0oLT.png\\",\\"https://z3.ax1x.com/2021/09/23/4wse61.png\\",\\"https://z3.ax1x.com/2021/09/23/4wyS9H.png\\",\\"https://s1.ax1x.com/2022/10/26/xWdBuV.png\\",\\"https://s1.ax1x.com/2022/10/26/xWd2C9.png\\"],\\"datePublished\\":\\"2021-09-23T18:00:00.000Z\\",\\"dateModified\\":\\"2025-07-03T11:15:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/migrated_blog/posts/blogs/Git"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Git"}],["meta",{"property":"og:description","content":"详细介绍git git常用命令 前言 git 的操作可以通过命令的形式如执行，日常使用就如下图6个命令即可 xWyjJO.pngxWyjJO.png 本地代码版本回退(重点) git reflog查看历史操作编号 git reset --soft [操作编号] 返回对应的暂存状态，多用于撤销上一步commit，回到原来add之后的状态 git rese..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s1.ax1x.com/2022/10/26/xWyjJO.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-03T11:15:49.000Z"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:published_time","content":"2021-09-23T18:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-03T11:15:49.000Z"}]]},"git":{"createdTime":1751541349000,"updatedTime":1751541349000,"contributors":[{"name":"zhujinfa","username":"zhujinfa","email":"2095229306@qq.com","commits":1,"url":"https://github.com/zhujinfa"}]},"readingTime":{"minutes":10.44,"words":3133},"filePathRelative":"posts/blogs/Git.md","excerpt":"<h2><a class=\\"header-anchor\\" href=\\"#详细介绍git\\"><span></span></a><a href=\\"https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">详细介绍git</a></h2>\\n<h2>git常用命令</h2>\\n<h3>前言</h3>\\n<p><code>git </code>的操作可以通过命令的形式如执行，日常使用就如下图6个命令即可</p>\\n<figure><img src=\\"https://s1.ax1x.com/2022/10/26/xWyjJO.png\\" alt=\\"xWyjJO.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>xWyjJO.png</figcaption></figure>","autoDesc":true}')},6262:(i,t)=>{t.A=(i,t)=>{const e=i.__vccOpts||i;for(const[i,s]of t)e[i]=s;return e}}}]);