"use strict";(self.webpackChunkmigrated_blog=self.webpackChunkmigrated_blog||[]).push([[8393],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}},6316:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>p});var t=a(641);const n={},e=(0,a(6262).A)(n,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router"><span>Vue-Router</span></a></h1><p>web的发展主要经历了这样一些阶段：</p><ul><li><strong>后端路由阶段</strong>：后端根据前端传来的URL生成相应的.html返回给前端，<strong>(页面映射表在后端)</strong></li><li><strong>前后端分离阶段</strong>：<strong>不同路径对应的.html页面还是由后端渲染获取</strong>，但<strong>页面不全是由后端渲染</strong>，一些<strong>比较固定的导航的数据由前端渲染</strong>，一些列表数据则还是通过网络请求从后端获取，<strong>此时(页面映射表还是在后端)</strong></li><li><strong>单页面富应用（SPA）：</strong><ul><li>特点：<strong>不是每次都需要更新全部页面</strong>，只需要<strong>更新需要更新的页面部分即可</strong></li><li>相当于**(页面映射表在前端)**，<strong>不同的页面地址对应不同的页面组件进行展示</strong>即可</li><li>按钮点击，改变页面地址，根据地址访问页面(router-view切换显示的组件)</li></ul></li></ul><h2 id="路径改变-页面不刷新-只改变页面部分内容-的实现" tabindex="-1"><a class="header-anchor" href="#路径改变-页面不刷新-只改变页面部分内容-的实现"><span>路径改变，页面不刷新(只改变页面部分内容)的实现</span></a></h2><h3 id="url的hash" tabindex="-1"><a class="header-anchor" href="#url的hash"><span>URL的hash</span></a></h3><ul><li>URL的hash也就是<strong>锚点(#)</strong>, 本质上是改变<strong>window.location的href</strong>属性；</li><li>我们<strong>可以通过直接赋值location.hash来改变href, 但是页面不发生刷新</strong>；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/05/p9NXQzV.png" alt="p9NXQzV.png" tabindex="0" loading="lazy"><figcaption>p9NXQzV.png</figcaption></figure><h3 id="html5的history" tabindex="-1"><a class="header-anchor" href="#html5的history"><span>html5的history</span></a></h3><p>history接口是HTML5新增的, 它有六种模式改变URL而不刷新页面：</p><ul><li><strong>replaceState</strong>：替换原来的路径；</li><li><strong>pushState</strong>：使用新的路径；</li><li><strong>popState</strong>：路径的回退；</li><li><strong>go</strong>：向前或向后改变路径；</li><li><strong>forward</strong>：向前改变路径；</li><li><strong>back</strong>：向后改变路径；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/05/p9NX6dH.png" alt="p9NX6dH.png" tabindex="0" loading="lazy"><figcaption>p9NX6dH.png</figcaption></figure><p>目前前端流行的三大框架, 都有自己的路由实现:</p><ul><li><strong>Angular的ngRouter</strong></li><li><strong>React的ReactRouter</strong></li><li><strong>Vue的vue-router</strong></li></ul><p>Vue Router 是 Vue.js 的官方路由：</p><ul><li>它与 Vue.js 核心深度集成，让用 Vue.js 构建**单页应用（SPA）**变得非常容易；</li><li>目前Vue路由最新的版本是4.x版本，我们上课会基于最新的版本讲解；</li></ul><p>vue-router是<strong>基于路由和组件</strong>的</p><ul><li>路由用于设定访问路径, 将<strong>路径和组件映射</strong>起来；</li><li>在vue-router的单页面应用中, <strong>页面的路径的改变就是组件的切换；</strong></li></ul><p>安装Vue Router：</p><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">npm install </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">vue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">router</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="使用步骤-重要" tabindex="-1"><a class="header-anchor" href="#使用步骤-重要"><span>使用步骤(重要)</span></a></h2><ul><li>第一步：创建路由需要映射的组件（打算显示的页面）；</li><li>第二步：通过createRouter创建路由对象，并且传入routes和history模式； <ul><li>配置路由映射: 组件和路径映射关系的routes数组；</li><li>创建基于hash或者history的模式；</li></ul></li><li>第三步：使用app注册路由对象（use方法）；</li><li>第四步：路由使用: 通过<code>&lt;router-view&gt;</code>和<code>&lt;router-link&gt;</code>；</li></ul><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-vue"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- &lt;keep-alive includes=&quot;home&quot;&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;router-view /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;/keep-alive&gt; --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">// 动态组件结合路由写法改为</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">router-view</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> v-slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;keep-alive include=&quot;home&quot;&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;component :is=&quot;Component&quot; /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/keep-alive&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">router-view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://s1.ax1x.com/2023/05/05/p9NxjSI.png" alt="p9NxjSI.png" tabindex="0" loading="lazy"><figcaption>p9NxjSI.png</figcaption></figure><figure><img src="https://s1.ax1x.com/2023/05/05/p9UKFS0.png" alt="p9UKFS0.png" tabindex="0" loading="lazy"><figcaption>p9UKFS0.png</figcaption></figure><h2 id="默认路径与重定向" tabindex="-1"><a class="header-anchor" href="#默认路径与重定向"><span>默认路径与重定向</span></a></h2><p>默认情况下, 进入网站的首页, 我们希望<code>&lt;router-view&gt;</code>渲染首页的内容；</p><figure><img src="https://s1.ax1x.com/2023/05/05/p9UdGoq.png" alt="p9UdGoq.png" tabindex="0" loading="lazy"><figcaption>p9UdGoq.png</figcaption></figure><h2 id="history和hash模式" tabindex="-1"><a class="header-anchor" href="#history和hash模式"><span>history和hash模式</span></a></h2><figure><img src="https://s1.ax1x.com/2023/05/05/p9Ud0OJ.png" alt="p9Ud0OJ.png" tabindex="0" loading="lazy"><figcaption>p9Ud0OJ.png</figcaption></figure><h2 id="router-link的一些属性" tabindex="-1"><a class="header-anchor" href="#router-link的一些属性"><span>router-link的一些属性</span></a></h2><p><strong>to属性</strong>：</p><ul><li>是一个字符串，或者是一个对象</li></ul><p><strong>replace属性</strong>：</p><ul><li>设置 replace 属性的话，当点击时，会调用 router.replace()，而不是 router.push()；</li></ul><p><strong>active-class属性</strong>：</p><ul><li>设置激活a元素后应用的class，默认是router-link-active</li></ul><p><strong>exact-active-class属性</strong>：</p><ul><li>链接精准激活时，应用于渲染的 <code>&lt;a&gt;</code> 的 class，默认是router-link-exact-active；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/05/p9Ud5md.png" alt="p9Ud5md.png" tabindex="0" loading="lazy"><figcaption>p9Ud5md.png</figcaption></figure><h2 id="路由懒加载-优化首屏渲染-重要" tabindex="-1"><a class="header-anchor" href="#路由懒加载-优化首屏渲染-重要"><span>路由懒加载(优化首屏渲染)(重要)</span></a></h2><p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载：</p><ul><li>如果我们能把<strong>不同路由对应的组件分割成不同的代码块</strong>，然后<strong>当路由被访问的时候才加载对应组件</strong>，这样就会更加<strong>高效</strong>；</li><li>也可以<strong>提高首屏的渲染效率</strong>；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/05/p9Uw09f.png" alt="p9Uw09f.png" tabindex="0" loading="lazy"><figcaption>p9Uw09f.png</figcaption></figure><h2 id="路由的其他属性-name-meta" tabindex="-1"><a class="header-anchor" href="#路由的其他属性-name-meta"><span>路由的其他属性(name,meta)</span></a></h2><p>name属性：路由记录独一无二的名称；跳转路由可以用name(但不推荐)</p><p>meta属性：自定义的数据；通过route.meta可以拿到</p><figure><img src="https://s1.ax1x.com/2023/05/05/p9U0pKe.png" alt="p9U0pKe.png" tabindex="0" loading="lazy"><figcaption>p9U0pKe.png</figcaption></figure><h2 id="区分options-api和composition-api的写法" tabindex="-1"><a class="header-anchor" href="#区分options-api和composition-api的写法"><span>区分options api和composition api的写法</span></a></h2><p><strong>Options API：</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$route</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 获取当前路由的相关信息</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$router</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 获取路由对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Composition API：</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useRoute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useRouter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vue-router&#39;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> route</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useRoute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 获取当前路由的相关信息</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> router</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useRouter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 获取路由对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态路由-重要" tabindex="-1"><a class="header-anchor" href="#动态路由-重要"><span>动态路由(重要)</span></a></h2><p>例如，我们可能有一个 User 组件，它应该对<strong>所有用户进行渲染，但是用户的ID是不同</strong>的；</p><p>在Vue Router中，我们可以在路径中使用一个<strong>动态字段来实现，我们称之为 路径参数</strong>；</p><figure><img src="https://s1.ax1x.com/2023/05/05/p9U0Ur4.png" alt="p9U0Ur4.png" tabindex="0" loading="lazy"><figcaption>p9U0Ur4.png</figcaption></figure><h3 id="动态路由动态值的获取-beforerouteupdate获取同路径不同id下的切换时机获取" tabindex="-1"><a class="header-anchor" href="#动态路由动态值的获取-beforerouteupdate获取同路径不同id下的切换时机获取"><span>动态路由动态值的获取(beforeRouteUpdate获取同路径不同id下的切换时机获取)</span></a></h3><figure><img src="https://s1.ax1x.com/2023/05/05/p9UBI0J.png" alt="p9UBI0J.png" tabindex="0" loading="lazy"><figcaption>p9UBI0J.png</figcaption></figure><h2 id="notfound页面-重要" tabindex="-1"><a class="header-anchor" href="#notfound页面-重要"><span>notFound页面(重要)</span></a></h2><figure><img src="https://s1.ax1x.com/2023/05/06/p9UboYq.png" alt="p9UboYq.png" tabindex="0" loading="lazy"><figcaption>p9UboYq.png</figcaption></figure><h2 id="路由的嵌套-重要" tabindex="-1"><a class="header-anchor" href="#路由的嵌套-重要"><span>路由的嵌套(重要)</span></a></h2><p><strong>使用children进行子路由的嵌套</strong></p><figure><img src="https://s1.ax1x.com/2023/05/06/p9awMJP.png" alt="p9awMJP.png" tabindex="0" loading="lazy"><figcaption>p9awMJP.png</figcaption></figure><p><strong>在相应的父级路由继续添加<code>&lt;router-view&gt;&lt;/router-view&gt;</code>展示子路由组件</strong></p><p><img src="https://s1.ax1x.com/2023/05/06/p9UXsHg.png" alt="p9UXsHg.png" loading="lazy">](htt</p><h2 id="编程式导航router路由跳转的方式-重要" tabindex="-1"><a class="header-anchor" href="#编程式导航router路由跳转的方式-重要"><span>编程式导航router路由跳转的方式(重要)</span></a></h2><h2 id="页面跳转query参数的传递和使用" tabindex="-1"><a class="header-anchor" href="#页面跳转query参数的传递和使用"><span>页面跳转query参数的传递和使用</span></a></h2><p><strong>options api里使用this.$router</strong>即可，注意区分route和router对象</p><figure><img src="https://s1.ax1x.com/2023/05/06/p9UO9sO.png" alt="p9UO9sO.png" tabindex="0" loading="lazy"><figcaption>p9UO9sO.png</figcaption></figure><figure><img src="https://s1.ax1x.com/2023/05/06/p9UXW3q.png" alt="p9UXW3q.png" tabindex="0" loading="lazy"><figcaption>p9UXW3q.png</figcaption></figure><h2 id="页面的前后退" tabindex="-1"><a class="header-anchor" href="#页面的前后退"><span>页面的前后退</span></a></h2><p><strong>router.back()</strong></p><p>通过调用 history.back() 回溯历史。相当于 router.go(-1)；</p><p><strong>router.forward()</strong></p><p>通过调用 history.forward() 前进页面。相当于 router.go(1)；</p><p><strong>router.go(2)</strong></p><p>根据参数number的正负决定前进还是后退多少个访问页面</p><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由"><span>动态路由</span></a></h2><p>对于有一部分路由，需要根据<strong>用户身份</strong>，来<strong>判断需要对哪些路由进行注册</strong>，解决了身份权限不足的用户可以在浏览器地址栏通过修改路径访问无权访问的界面的问题</p><p>某些情况下我们可能需要动态的来添加路由：</p><ul><li>比如<strong>根据用户不同的权限，注册不同的路由</strong>；</li><li>这个时候我们可以使用一个方法 <strong>addRoute</strong>；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/06/p9awpI1.png" alt="p9awpI1.png" tabindex="0" loading="lazy"><figcaption>p9awpI1.png</figcaption></figure><figure><img src="https://s1.ax1x.com/2023/05/06/p9aKFv6.png" alt="p9aKFv6.png" tabindex="0" loading="lazy"><figcaption>p9aKFv6.png</figcaption></figure><p><strong>动态删除路由</strong></p><p>删除路由有以下三种方式：</p><ul><li>方式一：<strong>添加一个name相同的路由</strong>；</li><li>方式二：通过<strong>removeRoute方法，传入路由的名称</strong>；</li><li>方式三：通过<strong>addRoute方法的返回值回调</strong>，调用addRoute返回的函数即可删除该路由</li></ul><figure><img src="https://s1.ax1x.com/2023/05/06/p9aKOJA.png" alt="p9aKOJA.png" tabindex="0" loading="lazy"><figcaption>p9aKOJA.png</figcaption></figure><p><strong>路由的其他方法</strong>补充：</p><ul><li><strong>router.hasRoute()：检查路由是否存在。</strong></li><li><strong>router.getRoutes()：获取一个包含所有路由记录的数组。</strong></li></ul><h2 id="路由导航守卫" tabindex="-1"><a class="header-anchor" href="#路由导航守卫"><span>路由导航守卫</span></a></h2><p><strong>页面跳转</strong>时(浏览器地址发生变化)，通过导航守卫可以在<strong>进入某个页面前</strong>，进行某些<strong>逻辑判断</strong>，<strong>是否有权限、满足条件</strong>进入该页面</p><p>全局的前置守卫beforeEach是在导航触发时会被回调的：</p><p>它有两个参数：</p><ul><li><strong>to：即将进入的路由Route对象；</strong></li><li><strong>from：即将离开的路由Route对象</strong>；</li></ul><p>它有返回值：</p><ul><li><strong>false</strong>：<strong>取消当前导航；</strong></li><li><strong>不返回或者undefined：进行默认导航；</strong></li><li>返回一个路由地址： <ul><li><strong>可以是一个string类型的路径；</strong></li><li><strong>可以是一个对象，对象中包含path、query、params等信息；</strong></li></ul></li></ul><p>可选的第三个参数：<strong>next（不推荐使用）</strong></p><ul><li>在Vue2中我们是通过next函数来决定如何进行跳转的；</li><li>但是在Vue3中我们是通过返回值来控制的，不再推荐使用next函数，这是因为开发中很容易调用多次next；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/06/p9a0hAs.png" alt="p9a0hAs.png" tabindex="0" loading="lazy"><figcaption>p9a0hAs.png</figcaption></figure><p><strong>其他导航守卫</strong></p><p>Vue还提供了很多的其他守卫函数，目的都是在某一个时刻给予我们回调，让我们可以更好的控制程序的流程或者功能：<a href="https://next.router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener noreferrer">其他导航守卫</a></p><h3 id="完整的导航解析流程" tabindex="-1"><a class="header-anchor" href="#完整的导航解析流程"><span>完整的导航解析流程</span></a></h3><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex"><span>Vuex</span></a></h1><p>共享状态的使用</p><figure><img src="https://s1.ax1x.com/2023/05/06/p9aOy8I.png" alt="p9aOy8I.png" tabindex="0" loading="lazy"><figcaption>p9aOy8I.png</figcaption></figure><h2 id="vuex基本使用" tabindex="-1"><a class="header-anchor" href="#vuex基本使用"><span>Vuex基本使用</span></a></h2><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">npm install vuex</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://s1.ax1x.com/2023/05/06/p9ajcB8.png" alt="p9ajcB8.png" tabindex="0" loading="lazy"><figcaption>p9ajcB8.png</figcaption></figure><figure><img src="https://s1.ax1x.com/2023/05/06/p9ajgHS.png" alt="p9ajgHS.png" tabindex="0" loading="lazy"><figcaption>p9ajgHS.png</figcaption></figure><p>Vuex和单纯的全局对象有什么区别呢？</p><p>第一：<strong>Vuex的状态存储是响应式的</strong></p><ul><li>当Vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会被更新；</li></ul><p>第二：<strong>你不能直接改变store中的状态</strong></p><ul><li>改变store中的状态的唯一途径就显示提交 (commit) mutation；</li><li>这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够通过一些工具帮助我们更好的管理应用的状态；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/07/p9d4Gr9.png" alt="p9d4Gr9.png" tabindex="0" loading="lazy"><figcaption>p9d4Gr9.png</figcaption></figure><h2 id="单一状态树" tabindex="-1"><a class="header-anchor" href="#单一状态树"><span>单一状态树</span></a></h2><p>Vuex 使用单一状态树：</p><ul><li>用一个<strong>对象就包含了全部的应用层级的状态</strong>；</li><li>采用的是<strong>SSOT，Single Source of Truth，也可以翻译成单一数据源</strong>；</li></ul><p>这也意味着，每个<strong>应用将仅仅包含一个 store</strong> 实例；</p><ul><li><strong>单状态树和模块化并不冲突，后面我们会讲到module</strong>的概念；</li></ul><p>单一状态树的优势：</p><ul><li>如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难；</li><li>所以Vuex也使用了<strong>单一状态树来管理应用层级的全部状态</strong>；</li><li>单一状态树能够让我们最直接的方式找到某个状态的片段；</li><li>而且在之后的维护和调试过程中，也可以非常方便的管理和维护；</li></ul><h2 id="state" tabindex="-1"><a class="header-anchor" href="#state"><span>state</span></a></h2><h3 id="mapstate映射函数-computed里使用" tabindex="-1"><a class="header-anchor" href="#mapstate映射函数-computed里使用"><span>mapState映射函数(computed里使用)</span></a></h3><p>如果我们有<strong>很多个状态都需要获取</strong>的话，可以<strong>使用mapState的辅助函数</strong>：</p><ul><li>mapState的方式一：对象类型；</li><li>mapState的方式二：数组类型；</li><li>也可以使用展开运算符和来原有的computed混合在一起；</li></ul><h3 id="以下关于state、getters、mutations的map方法先了解使用-一般情况使用普通模式-store-store-写就行" tabindex="-1"><a class="header-anchor" href="#以下关于state、getters、mutations的map方法先了解使用-一般情况使用普通模式-store-store-写就行"><span>以下关于state、getters、mutations的map方法先了解使用，一般情况使用普通模式($store. store. )写就行</span></a></h3><h3 id="options-api里使用mapstate" tabindex="-1"><a class="header-anchor" href="#options-api里使用mapstate"><span>options api里使用mapState</span></a></h3><figure><img src="https://s1.ax1x.com/2023/05/07/p9dIju4.png" alt="p9dIju4.png" tabindex="0" loading="lazy"><figcaption>p9dIju4.png</figcaption></figure><h3 id="setup里使用mapstate-不推荐-推荐方法三" tabindex="-1"><a class="header-anchor" href="#setup里使用mapstate-不推荐-推荐方法三"><span>setup里使用mapState(不推荐，推荐方法三)</span></a></h3><p>方法一：</p><figure><img src="https://s1.ax1x.com/2023/05/07/p9do02T.png" alt="p9do02T.png" tabindex="0" loading="lazy"><figcaption>p9do02T.png</figcaption></figure><p>方法二：</p><p>针对方法一的封装：useState.js</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vuex&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> store</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 拿到所有需要map的state对应的函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> mapStatesObj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mapState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> resState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapStatesObj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 通过computed拿到每一个state函数对应的state(并绑定正确的this)</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    resState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mapStatesObj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$store</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> resState</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://s1.ax1x.com/2023/05/07/p9dTxt1.png" alt="p9dTxt1.png" tabindex="0" loading="lazy"><figcaption>p9dTxt1.png</figcaption></figure><p><strong>方法三：toRefs解构store.state（推荐在setup里使用这种方式）</strong></p><figure><img src="https://s1.ax1x.com/2023/05/07/p9d7u1f.png" alt="p9d7u1f.png" tabindex="0" loading="lazy"><figcaption>p9d7u1f.png</figcaption></figure><h2 id="getters" tabindex="-1"><a class="header-anchor" href="#getters"><span>getters</span></a></h2><ol><li>普通用法</li><li>getters里通过第二个参数调用getter</li><li>getters里通过回调函数接参数，返回数据</li></ol><figure><img src="https://s1.ax1x.com/2023/05/07/p9w9FRe.png" alt="p9w9FRe.png" tabindex="0" loading="lazy"><figcaption>p9w9FRe.png</figcaption></figure><h3 id="computed里mapgetters-options-api" tabindex="-1"><a class="header-anchor" href="#computed里mapgetters-options-api"><span>computed里mapGetters(options api)</span></a></h3><figure><img src="https://s1.ax1x.com/2023/05/08/p9woRht.png" alt="p9woRht.png" tabindex="0" loading="lazy"><figcaption>p9woRht.png</figcaption></figure><h3 id="setup里同state里的三种方法使用getters-composition-api" tabindex="-1"><a class="header-anchor" href="#setup里同state里的三种方法使用getters-composition-api"><span><strong>setup里同state里的三种方法使用getters(composition api)</strong></span></a></h3><p>第三种自己封装一个同上面useState的useGetters的hooks函数</p><figure><img src="https://s1.ax1x.com/2023/05/08/p9wHCf1.png" alt="p9wHCf1.png" tabindex="0" loading="lazy"><figcaption>p9wHCf1.png</figcaption></figure><h2 id="mutations" tabindex="-1"><a class="header-anchor" href="#mutations"><span>mutations</span></a></h2><p><strong>更改vuex中的store的唯一方式是提交(commit)mutation</strong></p><p>不要在mutation中执行异步操作，方便dev-tools捕捉数据</p><figure><img src="https://s1.ax1x.com/2023/05/08/p9wq8oQ.png" alt="p9wq8oQ.png" tabindex="0" loading="lazy"><figcaption>p9wq8oQ.png</figcaption></figure><h3 id="在options-api里使用mapmutations" tabindex="-1"><a class="header-anchor" href="#在options-api里使用mapmutations"><span>在options api里使用mapMutations</span></a></h3><figure><img src="https://s1.ax1x.com/2023/05/08/p9wjxvn.png" alt="p9wjxvn.png" tabindex="0" loading="lazy"><figcaption>p9wjxvn.png</figcaption></figure><h3 id="在composition-api里使用mapmutations" tabindex="-1"><a class="header-anchor" href="#在composition-api里使用mapmutations"><span>在composition api里使用mapMutations</span></a></h3><figure><img src="https://s1.ax1x.com/2023/05/08/p9wviUU.png" alt="p9wviUU.png" tabindex="0" loading="lazy"><figcaption>p9wviUU.png</figcaption></figure><h2 id="actions" tabindex="-1"><a class="header-anchor" href="#actions"><span>actions</span></a></h2><p>Action<strong>类似于mutation</strong>，不同在于：</p><ul><li>Action<strong>提交的是mutation</strong>，而不是直接变更状态；</li><li>Action可以<strong>包含任意异步操作</strong>；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/08/p90kalT.png" alt="p90kalT.png" tabindex="0" loading="lazy"><figcaption>p90kalT.png</figcaption></figure><p>这里有一个非常重要的参数<strong>context</strong>：</p><ul><li><strong>context是一个和store实例均有相同方法和属性的context对象</strong>；</li><li>所以我们可以从其中获取到commit方法来提交一个mutation，或者通过 <strong>context.state 和 context.getters 来获取 state 和getters；</strong></li></ul><p><strong>基本使用</strong></p><figure><img src="https://s1.ax1x.com/2023/05/08/p90AXP1.png" alt="p90AXP1.png" tabindex="0" loading="lazy"><figcaption>p90AXP1.png</figcaption></figure><h3 id="mapactions" tabindex="-1"><a class="header-anchor" href="#mapactions"><span>mapActions</span></a></h3><h3 id="map对象写法" tabindex="-1"><a class="header-anchor" href="#map对象写法"><span>map对象写法</span></a></h3><figure><img src="https://s1.ax1x.com/2023/05/08/p90MJDx.png" alt="p90MJDx.png" tabindex="0" loading="lazy"><figcaption>p90MJDx.png</figcaption></figure><p><strong>options api里使用</strong></p><figure><img src="https://s1.ax1x.com/2023/05/08/p90MK5F.png" alt="p90MK5F.png" tabindex="0" loading="lazy"><figcaption>p90MK5F.png</figcaption></figure><p>composition api里使用(看选择额，也可不使用，直接store.dispatch)**</p><figure><img src="https://s1.ax1x.com/2023/05/08/p90M129.png" alt="p90M129.png" tabindex="0" loading="lazy"><figcaption>p90M129.png</figcaption></figure><h3 id="actions里异步请求获取页面的数据" tabindex="-1"><a class="header-anchor" href="#actions里异步请求获取页面的数据"><span>actions里异步请求获取页面的数据</span></a></h3><p><strong>fetch只能在浏览器环境中使用</strong></p><p><strong>Node环境中需要通过http模块来发送请求</strong></p><figure><img src="https://s1.ax1x.com/2023/05/08/p9012a6.png" alt="p9012a6.png" tabindex="0" loading="lazy"><figcaption>p9012a6.png</figcaption></figure><figure><img src="https://s1.ax1x.com/2023/05/08/p903lo6.png" alt="p903lo6.png" tabindex="0" loading="lazy"><figcaption>p903lo6.png</figcaption></figure><h2 id="modules" tabindex="-1"><a class="header-anchor" href="#modules"><span>modules</span></a></h2><p>什么是Module？</p><ul><li><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store 对象就有可能变得相当臃肿；</p></li><li><p>为了解决以上问题，<strong>Vuex 允许我们将 store 分割成模块（module）；</strong></p></li><li><p><strong>每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</strong>；</p></li></ul><figure><img src="https://s1.ax1x.com/2023/05/09/p90jqFU.png" alt="p90jqFU.png" tabindex="0" loading="lazy"><figcaption>p90jqFU.png</figcaption></figure><h3 id="module的局部状态" tabindex="-1"><a class="header-anchor" href="#module的局部状态"><span>module的局部状态</span></a></h3><p>默认情况下只有<strong>使用不同模块的state时才需要加上相应的模块名($<a href="http://store.state.moduleName.xxx" target="_blank" rel="noopener noreferrer">store.state.moduleName.xxx</a>)</strong>，其他的getters、mutations、actions、modules相当于合并到了root的各模块里</p><figure><img src="https://s1.ax1x.com/2023/05/09/p90z2FK.png" alt="p90z2FK.png" tabindex="0" loading="lazy"><figcaption>p90z2FK.png</figcaption></figure><h3 id="module的命名空间-命名冲突的解决" tabindex="-1"><a class="header-anchor" href="#module的命名空间-命名冲突的解决"><span>module的命名空间(命名冲突的解决)</span></a></h3><p>默认情况下只有<strong>使用不同模块的state时才需要加上相应的模块名($<a href="http://store.state.moduleName.xxx" target="_blank" rel="noopener noreferrer">store.state.moduleName.xxx</a>)</strong>，其他的getters、mutations、actions、modules相当于默认合并到了root的各模块里</p><p>所以容易出现的情况就是，获取<strong>一个getters、mutations或dispatch派发一个action，如果某个module有相同命名，则会出现一处调用，多处响应的情况出现</strong></p><p>希望模块具有更高的封装度和复用性，可以添加 namespaced: true 的方式使其成为带命名空间的模块：</p><ul><li>当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名；</li></ul><p><strong>(重点图片!)</strong></p><figure><img src="https://s1.ax1x.com/2023/05/09/p9B9KJK.png" alt="p9B9KJK.png" tabindex="0" loading="lazy"><figcaption>p9B9KJK.png</figcaption></figure><h3 id="module修改或派发根组件" tabindex="-1"><a class="header-anchor" href="#module修改或派发根组件"><span>module修改或派发根组件</span></a></h3><p><strong>如果我们希望在action中修改root中的state</strong>(其实也可以直接调用根组件的action啊)，那么有如下的方式：</p><figure><img src="https://s1.ax1x.com/2023/05/09/p9B9rLj.png" alt="p9B9rLj.png" tabindex="0" loading="lazy"><figcaption>p9B9rLj.png</figcaption></figure><h1 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia"><span>Pinia</span></a></h1><ul><li>Pinia开始于大概2019年，最初是作为一个实验为<strong>Vue重新设计状态管理</strong>，让它用起来像组合式API（Composition API）。</li><li>从那时到现在，最初的设计原则依然是相同的，并且目前<strong>同时兼容Vue2、Vue3</strong>，也并不要求你使用Composition API；</li><li>Pinia本质上依然是一个<strong>状态管理的库，用于跨组件、页面进行状态共享</strong>（这点和<strong>Vuex、Redux一样</strong>）；</li></ul><figure><img src="https://s1.ax1x.com/2023/05/09/p9Bnjpj.png" alt="p9Bnjpj.png" tabindex="0" loading="lazy"><figcaption>p9Bnjpj.png</figcaption></figure><h2 id="pinia和vuex的联系与区别-vuex5的替代版" tabindex="-1"><a class="header-anchor" href="#pinia和vuex的联系与区别-vuex5的替代版"><span>Pinia和Vuex的联系与区别(Vuex5的替代版)</span></a></h2><ul><li>Pinia 最初是为了探索 Vuex 的下一次迭代会是什么样子，结合了 <strong>Vuex 5</strong> 核心团队讨论中的许多想法；</li><li>最终，团队意识到Pinia已经<strong>实现了Vuex5中大部分内容</strong>，所以最终<strong>决定用Pinia来替代Vuex</strong>；</li><li>与 Vuex 相比，<strong>Pinia 提供了一个更简单的 API，具有更少的仪式</strong>，提供了 <strong>Composition-API 风格的 API</strong>；</li><li>最重要的是，在<strong>与 TypeScript 一起使用时具有可靠的类型推断支持</strong>；</li></ul><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><p>和Vuex相比，Pinia有很多的优势：</p><ul><li>比如<strong>mutations 不再存在，只包含state、getters、actions</strong>： <ul><li>他们经常被认为是 非常 冗长；</li><li>他们最初带来了 devtools 集成，但这不再是问题；</li></ul></li><li>更<strong>友好的TypeScript支持，Vuex之前对TS的支持很不友好</strong>；</li><li><strong>不再有modules的嵌套结构</strong>： <ul><li>你可以<strong>灵活使用每一个store，它们是通过扁平化的方式来相互使用</strong>的；</li></ul></li><li>也<strong>不再有命名空间的概念</strong>，不需要记住它们的复杂关系；</li></ul><h2 id="创建pinia的store" tabindex="-1"><a class="header-anchor" href="#创建pinia的store"><span>创建Pinia的Store</span></a></h2><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">npm install pinia</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h3><p>什么是Store？</p><ul><li>一个 Store （如 Pinia）是一个实体，它会持有为<strong>绑定到你组件树的状态和业务逻辑</strong>，也就是保存了全局的状态；</li><li>它有点像<strong>始终存在，并且每个人都可以读取和写入的组件</strong>；</li><li>你可以在你的<strong>应用程序中定义任意数量的Store来管理你的状态</strong>；</li></ul><p>Store有三个核心概念：</p><ul><li><strong>state、getters、actions</strong>；</li><li>等<strong>同于组件的data、computed、methods</strong>；</li><li>一旦 <strong>store 被实例化，你就可以直接在 store 上访问 state、getters 和 actions 中定义的任何属性</strong>；</li></ul><p>返回的函数统一使用useX的规范进行定义</p><figure><img src="https://s1.ax1x.com/2023/05/09/p9B1tTx.png" alt="p9B1tTx.png" tabindex="0" loading="lazy"><figcaption>p9B1tTx.png</figcaption></figure><h2 id="pinia核心概念state" tabindex="-1"><a class="header-anchor" href="#pinia核心概念state"><span>Pinia核心概念State</span></a></h2><h3 id="state的使用以及相关操作" tabindex="-1"><a class="header-anchor" href="#state的使用以及相关操作"><span>state的使用以及相关操作</span></a></h3><figure><img src="https://s1.ax1x.com/2023/05/14/p9c8jk4.png" alt="p9c8jk4.png" tabindex="0" loading="lazy"><figcaption>p9c8jk4.png</figcaption></figure><h2 id="pinia核心概念getters" tabindex="-1"><a class="header-anchor" href="#pinia核心概念getters"><span>Pinia核心概念Getters</span></a></h2><figure><img src="https://s1.ax1x.com/2023/05/14/p9cJKPJ.png" alt="p9cJKPJ.png" tabindex="0" loading="lazy"><figcaption>p9cJKPJ.png</figcaption></figure><h2 id="pinia核心概念actions" tabindex="-1"><a class="header-anchor" href="#pinia核心概念actions"><span>Pinia核心概念Actions</span></a></h2><figure><img src="https://s1.ax1x.com/2023/05/14/p9cILkT.png" alt="p9cILkT.png" tabindex="0" loading="lazy"><figcaption>p9cILkT.png</figcaption></figure><h1 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>Axios</span></a></h1><p><strong>axios功能特点:</strong></p><ul><li>在<strong>浏览器中发送 XMLHttpRequests 请求</strong></li><li>在 <strong>node.js 中发送 http请求</strong>(自动区分环境)</li><li><strong>支持 Promise API</strong></li><li><strong>拦截请求和响应</strong></li><li><strong>转换请求和响应数据</strong></li></ul><p><strong>支持多种请求方式:</strong></p><ul><li><strong>axios(config)</strong></li><li><strong>axios.request(config)</strong></li><li><strong>axios.get(url[, config])</strong></li><li><strong>axios.delete(url[, config])</strong></li><li><strong>axios.head(url[, config])</strong></li><li><strong>axios.post(url[, data[, config]])</strong></li><li><strong>axios.put(url[, data[, config]])</strong></li><li><strong>axios.patch(url[, data[, config]])</strong></li></ul><p>具体使用请查看: <a href="https://blog.zhujinfa.top/react%E4%B8%ADaxios%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%81react-router(v5)/#react%E4%B8%ADaxios%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%81react-router-v5" target="_blank" rel="noopener noreferrer">axios</a></p>',222)]))}]]),p=JSON.parse('{"path":"/posts/blogs/Vue-Router-VueX-Pinia","title":"Vue-Router-VueX-Pinia","lang":"zh-CN","frontmatter":{"title":"Vue-Router-VueX-Pinia","date":"2023-05-10T22:15:00.000Z","permalink":"/posts/blogs/Vue-Router-VueX-Pinia","isTimeLine":true,"category":["我的前端路线"],"tag":["vue3","vue-router","VueX","Pinia"],"icon":"pen-to-square","star":true,"sticky":true,"description":"Vue-Router web的发展主要经历了这样一些阶段： 后端路由阶段：后端根据前端传来的URL生成相应的.html返回给前端，(页面映射表在后端) 前后端分离阶段：不同路径对应的.html页面还是由后端渲染获取，但页面不全是由后端渲染，一些比较固定的导航的数据由前端渲染，一些列表数据则还是通过网络请求从后端获取，此时(页面映射表还是在后端) 单页面...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue-Router-VueX-Pinia\\",\\"image\\":[\\"https://s1.ax1x.com/2023/05/05/p9NXQzV.png\\",\\"https://s1.ax1x.com/2023/05/05/p9NX6dH.png\\",\\"https://s1.ax1x.com/2023/05/05/p9NxjSI.png\\",\\"https://s1.ax1x.com/2023/05/05/p9UKFS0.png\\",\\"https://s1.ax1x.com/2023/05/05/p9UdGoq.png\\",\\"https://s1.ax1x.com/2023/05/05/p9Ud0OJ.png\\",\\"https://s1.ax1x.com/2023/05/05/p9Ud5md.png\\",\\"https://s1.ax1x.com/2023/05/05/p9Uw09f.png\\",\\"https://s1.ax1x.com/2023/05/05/p9U0pKe.png\\",\\"https://s1.ax1x.com/2023/05/05/p9U0Ur4.png\\",\\"https://s1.ax1x.com/2023/05/05/p9UBI0J.png\\",\\"https://s1.ax1x.com/2023/05/06/p9UboYq.png\\",\\"https://s1.ax1x.com/2023/05/06/p9awMJP.png\\",\\"https://s1.ax1x.com/2023/05/06/p9UXsHg.png\\",\\"https://s1.ax1x.com/2023/05/06/p9UO9sO.png\\",\\"https://s1.ax1x.com/2023/05/06/p9UXW3q.png\\",\\"https://s1.ax1x.com/2023/05/06/p9awpI1.png\\",\\"https://s1.ax1x.com/2023/05/06/p9aKFv6.png\\",\\"https://s1.ax1x.com/2023/05/06/p9aKOJA.png\\",\\"https://s1.ax1x.com/2023/05/06/p9a0hAs.png\\",\\"https://s1.ax1x.com/2023/05/06/p9aOy8I.png\\",\\"https://s1.ax1x.com/2023/05/06/p9ajcB8.png\\",\\"https://s1.ax1x.com/2023/05/06/p9ajgHS.png\\",\\"https://s1.ax1x.com/2023/05/07/p9d4Gr9.png\\",\\"https://s1.ax1x.com/2023/05/07/p9dIju4.png\\",\\"https://s1.ax1x.com/2023/05/07/p9do02T.png\\",\\"https://s1.ax1x.com/2023/05/07/p9dTxt1.png\\",\\"https://s1.ax1x.com/2023/05/07/p9d7u1f.png\\",\\"https://s1.ax1x.com/2023/05/07/p9w9FRe.png\\",\\"https://s1.ax1x.com/2023/05/08/p9woRht.png\\",\\"https://s1.ax1x.com/2023/05/08/p9wHCf1.png\\",\\"https://s1.ax1x.com/2023/05/08/p9wq8oQ.png\\",\\"https://s1.ax1x.com/2023/05/08/p9wjxvn.png\\",\\"https://s1.ax1x.com/2023/05/08/p9wviUU.png\\",\\"https://s1.ax1x.com/2023/05/08/p90kalT.png\\",\\"https://s1.ax1x.com/2023/05/08/p90AXP1.png\\",\\"https://s1.ax1x.com/2023/05/08/p90MJDx.png\\",\\"https://s1.ax1x.com/2023/05/08/p90MK5F.png\\",\\"https://s1.ax1x.com/2023/05/08/p90M129.png\\",\\"https://s1.ax1x.com/2023/05/08/p9012a6.png\\",\\"https://s1.ax1x.com/2023/05/08/p903lo6.png\\",\\"https://s1.ax1x.com/2023/05/09/p90jqFU.png\\",\\"https://s1.ax1x.com/2023/05/09/p90z2FK.png\\",\\"https://s1.ax1x.com/2023/05/09/p9B9KJK.png\\",\\"https://s1.ax1x.com/2023/05/09/p9B9rLj.png\\",\\"https://s1.ax1x.com/2023/05/09/p9Bnjpj.png\\",\\"https://s1.ax1x.com/2023/05/09/p9B1tTx.png\\",\\"https://s1.ax1x.com/2023/05/14/p9c8jk4.png\\",\\"https://s1.ax1x.com/2023/05/14/p9cJKPJ.png\\",\\"https://s1.ax1x.com/2023/05/14/p9cILkT.png\\"],\\"datePublished\\":\\"2023-05-10T22:15:00.000Z\\",\\"dateModified\\":\\"2025-07-03T11:15:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zzf\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/migrated_blog/posts/blogs/Vue-Router-VueX-Pinia"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Vue-Router-VueX-Pinia"}],["meta",{"property":"og:description","content":"Vue-Router web的发展主要经历了这样一些阶段： 后端路由阶段：后端根据前端传来的URL生成相应的.html返回给前端，(页面映射表在后端) 前后端分离阶段：不同路径对应的.html页面还是由后端渲染获取，但页面不全是由后端渲染，一些比较固定的导航的数据由前端渲染，一些列表数据则还是通过网络请求从后端获取，此时(页面映射表还是在后端) 单页面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s1.ax1x.com/2023/05/05/p9NXQzV.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-03T11:15:49.000Z"}],["meta",{"property":"article:tag","content":"Pinia"}],["meta",{"property":"article:tag","content":"VueX"}],["meta",{"property":"article:tag","content":"vue-router"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:published_time","content":"2023-05-10T22:15:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-03T11:15:49.000Z"}]]},"git":{"createdTime":1751541349000,"updatedTime":1751541349000,"contributors":[{"name":"zhujinfa","username":"zhujinfa","email":"2095229306@qq.com","commits":1,"url":"https://github.com/zhujinfa"}]},"readingTime":{"minutes":13.96,"words":4188},"filePathRelative":"posts/blogs/Vue-Router-VueX-Pinia.md","excerpt":"\\n<p>web的发展主要经历了这样一些阶段：</p>\\n<ul>\\n<li><strong>后端路由阶段</strong>：后端根据前端传来的URL生成相应的.html返回给前端，<strong>(页面映射表在后端)</strong></li>\\n<li><strong>前后端分离阶段</strong>：<strong>不同路径对应的.html页面还是由后端渲染获取</strong>，但<strong>页面不全是由后端渲染</strong>，一些<strong>比较固定的导航的数据由前端渲染</strong>，一些列表数据则还是通过网络请求从后端获取，<strong>此时(页面映射表还是在后端)</strong></li>\\n<li><strong>单页面富应用（SPA）：</strong>\\n<ul>\\n<li>特点：<strong>不是每次都需要更新全部页面</strong>，只需要<strong>更新需要更新的页面部分即可</strong></li>\\n<li>相当于**(页面映射表在前端)**，<strong>不同的页面地址对应不同的页面组件进行展示</strong>即可</li>\\n<li>按钮点击，改变页面地址，根据地址访问页面(router-view切换显示的组件)</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);