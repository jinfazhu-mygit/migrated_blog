"use strict";(self.webpackChunkmigrated_blog=self.webpackChunkmigrated_blog||[]).push([[8030],{2942:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>e});var n=a(641);const t={},l=(0,a(6262).A)(t,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h2 id="redux" tabindex="-1"><a class="header-anchor" href="#redux"><span>Redux</span></a></h2><ul><li>Redux就<strong>是一个帮助我们管理State的容器</strong>：<strong>Redux是JavaScript的状态容器</strong>，提供了<strong>可预测的状态管理</strong></li><li>Redux除了和React一起使用之外，它<strong>也可以和其他界面库一起来使用（比如Vue）</strong>，并且它非常小（包括依赖在内，只有2kb）</li><li><strong>store</strong>存储，将数据存入至一个公共的对象中，进行数据共享</li><li>Redux要求<strong>所有数据的变化</strong>，必须<strong>通过派发（dispatch）action来更新</strong>；</li><li>如何<strong>将state和action联系在一起</strong>？<strong>reducer</strong><ul><li>reducer是一个纯函数</li><li><strong>reducer</strong>做的事情就是<strong>将传入的state和action结合起来生成一个新的state</strong></li></ul></li></ul><h3 id="redux三大原则" tabindex="-1"><a class="header-anchor" href="#redux三大原则"><span>Redux三大原则</span></a></h3><h4 id="单一数据源" tabindex="-1"><a class="header-anchor" href="#单一数据源"><span>单一数据源</span></a></h4><ul><li>整个应用程序的state被存储在一颗object tree中，并且这个object tree只存储在一个 store 中：</li><li>Redux并没有强制让我们不能创建多个Store，但是那样做并不利于数据的维护；</li><li>单一的数据源可以让整个应用程序的state变得方便维护、追踪、修改；</li></ul><h4 id="state是只读的" tabindex="-1"><a class="header-anchor" href="#state是只读的"><span>State是只读的</span></a></h4><ul><li><p><strong>唯一修改State的方法一定是触发action</strong>，不要试图在其他地方通过任何的方式来修改State：</p></li><li><p>这样就确保了View或网络请求都不能直接修改state，它们<strong>只能通过action</strong>来描述自己想要如何修改state；</p></li><li><p>这样可以<strong>保证所有的修改都被集中化处理</strong>，并且按照严格的顺序来执行，所以不需要担心race condition（竟态）的问题；</p></li></ul><h4 id="使用纯函数来执行修改" tabindex="-1"><a class="header-anchor" href="#使用纯函数来执行修改"><span>使用纯函数来执行修改</span></a></h4><ul><li>通过<strong>reducer将 旧state和 actions联系在一起</strong>，并且返回一个新的State：</li><li>随着应用程序的复杂度增加，我们可以<strong>将reducer拆分成多个小的reducers</strong>，分别<strong>操作不同state tree的一部分</strong>；</li><li>但是<strong>所有的reducer都应该是纯函数</strong>，不能产生任何的副作用；</li></ul><h3 id="redux的使用" tabindex="-1"><a class="header-anchor" href="#redux的使用"><span>Redux的使用</span></a></h3><ul><li>安装</li></ul><div class="language-cmd line-numbers-mode" data-highlighter="shiki" data-ext="cmd" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-cmd"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">npm install </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">redux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> --</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">save</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>1.<strong>创建一个对象，作为我们要保存的状态</strong>：</li><li>2.<strong>创建Store来存储这个state</strong><ul><li>创建store时必须创建reducer；</li><li>我们可以通过 <strong>store.getState()</strong> 来获取当前的state</li></ul></li><li>3.通过<strong>action来修改state</strong><ul><li>通过<strong>dispatch来派发action</strong>；</li><li>通常<strong>action中都会有type属性，也可以携带其他的数据</strong>；</li></ul></li><li>4.修改<strong>reducer中的处理代码</strong><ul><li>这里一定要记住，reducer是一个纯函数，不需要直接修改state；</li><li>后面我会讲到直接修改state带来的问题；</li></ul></li><li>5.可以<strong>在派发action之前，监听store的变化</strong></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// react17 未封装写法</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> redux</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;redux&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 1.store 2.action 3.reducer</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 初始化的数据</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> initialState</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// reducer</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reducer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">state</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> initialState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;INCREMENT&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;DECREMENT&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;ADD_NUMBER&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;SUB_NUMBER&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">conter</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> action</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// store</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在创建store的时候传入一个reducer纯函数</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// const store = redux.createStore(); // 弃用</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> store</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> redux</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">reducer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 订阅store的修改</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">subscribe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;counter:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// actions</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> action1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;INCREMENT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> action2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;DECREMNT&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> action3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ADD_NUMBER&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> action4</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;SUB_NUMBER&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">num</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 派发action，实际上就是执行reducer纯函数</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">action1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">action2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">action3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">dispatch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">action4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redux对比mobx" tabindex="-1"><a class="header-anchor" href="#redux对比mobx"><span>Redux对比mobx</span></a></h3><h4 id="共同点" tabindex="-1"><a class="header-anchor" href="#共同点"><span>共同点</span></a></h4><ul><li>为了<strong>解决状态管理混乱</strong>、无法有效同步的问题，<strong>统一维护管理应用状态</strong></li><li>某一状态只有一个可信数据来源（通常命名为store，指状态容器）</li><li>操作更新状态方式统一，并且可控（通常以action方式提供更新状态的途径）</li><li>支持将store与React组件连接，如<code>react-redux</code>，<code>mobx-react</code></li></ul><h4 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h4><p>Redux更多的是遵循Flux模式的一种实现，是一个 JavaScript 库，它关注点主要是以下几方面∶</p><ul><li><p>Reducer∶ <strong>定义应用状态如何响应不同动作（action）</strong>，如何更新状态;</p></li><li><p>Action∶ 一个JavaScript对象，<strong>描述动作相关信息</strong>，主要包含type属性和payload属性∶</p></li><li><p>Store∶ 管理action和reducer及其关系的对象，主要提供以下功能∶</p><ul><li><strong>维护应用状态并支持访问状态(getState())</strong>;</li><li><strong>支持监听action的分发，更新状态(dispatch(action))</strong>;</li><li>支持<strong>订阅store的变更(subscribe(listener))</strong>;</li></ul></li><li><p>异步流∶ 由于Redux所有对store状态的变更，都应该通过action触发，<strong>异步任务</strong>（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入React组件中，就<strong>需要使用其他框架配合管理异步任务流程，如redux-thunk，redux-saga等</strong>;</p></li></ul><p>Mobx是一个<strong>透明函数响应式编程的状态管理库</strong>，它使得状态管理简单可伸缩∶</p><ul><li>Action∶<strong>定义改变状态的动作函数</strong>，包括<strong>如何变更状态</strong>;</li><li>Store∶ 集中<strong>管理模块状态（State）和动作(action)</strong></li><li>Derivation（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据</li></ul><h4 id="对比总结" tabindex="-1"><a class="header-anchor" href="#对比总结"><span>对比总结</span></a></h4><ul><li><code>redux</code>将数据保存在<strong>单一的store</strong>中，<code>mobx</code>将数据保存在<strong>分散的多个store</strong>中</li><li>redux使用<code>plain object</code>保存数据，需要手动处理变化后的操作;mobx适用<strong>observable</strong>保存数据，<strong>数据变化后自动处理响应的操作</strong></li><li><strong>redux使用不可变状态</strong>，这意味着状态是只读的，<strong>不能直接去修改它</strong>，<strong>而是应该返回一个新的状态</strong>，**同时使用纯函数；**mobx中的状态是可变的，可以直接对其进行修改</li><li>mobx相对来说比较简单，在其中有很多的抽象，<strong>mobx更多的使用面向对象的编程思维</strong>;redux会比较复杂，因为其中的<strong>函数式编程思想</strong>掌握起来不是那么容易，同时需要<strong>借助一系列的中间件(redux-thunk、redux-saga)来处理异步和副作用</strong></li><li>mobx中有更多的抽象和封装，调试会比较困难，同时结果也难以预测;而redux提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易</li></ul><h3 id="redux对比vuex" tabindex="-1"><a class="header-anchor" href="#redux对比vuex"><span>Redux对比Vuex</span></a></h3><h4 id="相同点" tabindex="-1"><a class="header-anchor" href="#相同点"><span>相同点</span></a></h4><ul><li>通过state共享数据</li><li>流程一致：定义全局state，触发，修改state</li><li>原理相似，通过全局注入store</li></ul><h4 id="不同点" tabindex="-1"><a class="header-anchor" href="#不同点"><span>不同点</span></a></h4><ul><li>从实现原理上来说： <ul><li><strong>Redux 使用的是不可变数据</strong>，<strong>而Vuex的数据是可变的</strong>。<code>Redux</code>每次都是用<strong>新的state替换旧的state</strong>，而<code>Vuex</code>是<strong>直接修改</strong></li><li>Redux 在检测数据变化的时候，是通过 <strong>diff 的方式比较差异</strong>的，而Vuex其实和Vue的原理一样，是通过 getter/setter来比较的</li></ul></li><li>从表现层来说： <ul><li>vuex定义了<strong>state、getter、mutation、action</strong>四个对象；redux定义了<strong>state、reducer、action</strong>。</li><li>vuex中state统一存放，方便理解；redux state依赖所有reducer的初始值</li><li>vuex有getter,目的是快捷得到state；redux没有这层，react-redux mapStateToProps参数做了这个工作。</li><li>vuex中mutation只是单纯<strong>赋值</strong>(很浅的一层)；redux中reducer只是单纯<strong>设置新state</strong>(很浅的一层)。他俩作用类似，但书写方式不同</li><li>vuex中action有较为复杂的异步ajax请求；redux中action中可简单可复杂,简单就直接发送数据对象（{type:xxx, your-data}）,复杂需要调用异步ajax（依赖redux-thunk插件）。</li><li>vuex触发方式有两种<strong>commit同步和dispatch异步</strong>；<strong>redux同步和异步都使用dispatch</strong></li></ul></li></ul>',29)]))}]]),e=JSON.parse('{"path":"/posts/blogs/Redux","title":"Redux","lang":"zh-CN","frontmatter":{"title":"Redux","date":"2022-06-18T22:00:00.000Z","permalink":"/posts/blogs/Redux","isTimeLine":true,"category":["我的前端路线"],"tag":["React","javascript"],"icon":"pen-to-square","star":true,"sticky":true,"description":"Redux Redux就是一个帮助我们管理State的容器：Redux是JavaScript的状态容器，提供了可预测的状态管理 Redux除了和React一起使用之外，它也可以和其他界面库一起来使用（比如Vue），并且它非常小（包括依赖在内，只有2kb） store存储，将数据存入至一个公共的对象中，进行数据共享 Redux要求所有数据的变化，必须通过...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redux\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-18T22:00:00.000Z\\",\\"dateModified\\":\\"2025-07-03T11:15:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zzf\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/migrated_blog/posts/blogs/Redux"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Redux"}],["meta",{"property":"og:description","content":"Redux Redux就是一个帮助我们管理State的容器：Redux是JavaScript的状态容器，提供了可预测的状态管理 Redux除了和React一起使用之外，它也可以和其他界面库一起来使用（比如Vue），并且它非常小（包括依赖在内，只有2kb） store存储，将数据存入至一个公共的对象中，进行数据共享 Redux要求所有数据的变化，必须通过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-03T11:15:49.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2022-06-18T22:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-03T11:15:49.000Z"}]]},"git":{"createdTime":1751541349000,"updatedTime":1751541349000,"contributors":[{"name":"zhujinfa","username":"zhujinfa","email":"2095229306@qq.com","commits":1,"url":"https://github.com/zhujinfa"}]},"readingTime":{"minutes":6.26,"words":1879},"filePathRelative":"posts/blogs/Redux.md","excerpt":"<h2>Redux</h2>\\n<ul>\\n<li>Redux就<strong>是一个帮助我们管理State的容器</strong>：<strong>Redux是JavaScript的状态容器</strong>，提供了<strong>可预测的状态管理</strong></li>\\n<li>Redux除了和React一起使用之外，它<strong>也可以和其他界面库一起来使用（比如Vue）</strong>，并且它非常小（包括依赖在内，只有2kb）</li>\\n<li><strong>store</strong>存储，将数据存入至一个公共的对象中，进行数据共享</li>\\n<li>Redux要求<strong>所有数据的变化</strong>，必须<strong>通过派发（dispatch）action来更新</strong>；</li>\\n<li>如何<strong>将state和action联系在一起</strong>？<strong>reducer</strong>\\n<ul>\\n<li>reducer是一个纯函数</li>\\n<li><strong>reducer</strong>做的事情就是<strong>将传入的state和action结合起来生成一个新的state</strong></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')},6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}}}]);